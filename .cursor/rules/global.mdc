---
description: 
globs: 
alwaysApply: true
---
You are an expert in Laravel, PHP, Livewire, Alpine.js, and the Flux component library. Your primary directive is to generate high-quality, consistent, and maintainable code that integrates seamlessly with the existing project structure and patterns.

Key Principles

Write concise, idiomatic, and strongly-typed code with accurate examples.
Focus on a component-based architecture using Livewire for dynamic interfaces and Blade for structure.
Adhere strictly to the project's established conventions and best practices.
Apply SOLID principles and the DRY (Don't Repeat Yourself) principle.
Favor composition and modularization over code duplication. Extract reusable logic into services or traits and UI into Blade/Livewire components.
Use descriptive and consistent names for variables, methods, and components.
Follow the existing file and directory structure.
Prefer dependency injection and Laravel's service container for resolving dependencies.
PHP/Laravel

Use PHP 8.1+ features where appropriate (e.g., typed properties, enums, match expressions).
Adhere to PSR-12 coding standards.
Use strict typing in all PHP files: declare(strict_types=1);.
Utilize Laravel's built-in features, facades, and helpers whenever possible.
Use the existing service layer for business logic.
Use the Settings facade for all application configuration. Do not hardcode settings.
Use the ActivityLogger facade for logging all significant user actions (CRUD, auth events, etc.).
Use the Notifications facade for dispatching all user notifications.
Use the AttachmentService for handling all file uploads and manipulations.
Use Livewire's real-time validation with the $rules property. For complex validation in controllers, use Form Requests.
Use Eloquent ORM for all database interactions.
Always prevent N+1 issues by eager-loading relationships (with([...])).
Use database migrations for all schema changes and seeders for initial data.
Implement model events for related logic (e.g., the deleting event on the Attachment model to remove files).
Livewire

Use Livewire components for all dynamic interfaces and real-time interactions.
Maximize the use of Livewire's lifecycle hooks (e.g., mount, updated) and computed properties (#[Computed]).
Use wire:model for data binding, wire:click for actions, and wire:submit for forms.
Always provide user feedback for long-running actions using wire:loading and wire:target.
For UI feedback (toasts, modals), use the Flux::toast() and Flux::modal() helpers from within Livewire components.
Frontend (Flux, Tailwind CSS, Alpine.js)

Use flux: components exclusively within the admin area (routes defined in routes/admin.php).
The only exception is <flux:icon>, which can be used globally.
All user-facing strings must be wrapped in the __('...') translation helper.
Use the English string literal as the key (e.g., __('Delete User')). Do not create dot-notation keys.
Use Tailwind CSS utility classes for all styling. Adhere to the configuration defined in resources/css/app.css.
Use Alpine.js for simple, client-side interactions that don't require a server roundtrip.
Use GSAP for any complex UI animations.
Implement subtle micro-interactions (e.g., hover effects, transitions) to enhance user experience.
Before creating a new UI element, check for an existing component in resources/views/components or the Flux library documentation.
Extract any reusable UI patterns into new Blade components.
Project Best Practices

Strictly follow the route file separation: web.php, admin.php, api.php, and auth.php.
Use Laravel's built-in authentication and authorization features, including middleware (auth, guest, role, permission) and the existing Two-Factor Authentication flow.
Manage component state within Livewire properties. For global state, use the database-driven settings system.
Use Laravel's exception handling. Use try-catch blocks for operations that are expected to fail (e.g., file operations, external API calls) and log errors using the Log facade.
Use Vite for all frontend asset compilation as configured in vite.config.js.

Keep Livewire components organized by feature area (e.g., Admin, Auth, Profile).